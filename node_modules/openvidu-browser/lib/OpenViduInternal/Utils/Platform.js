"use strict";
exports.__esModule = true;
exports.PlatformUtils = void 0;
var platform = require("platform");
var PlatformUtils = /** @class */ (function () {
    function PlatformUtils() {
    }
    PlatformUtils.getInstance = function () {
        if (!PlatformUtils.instance) {
            PlatformUtils.instance = new PlatformUtils();
        }
        return PlatformUtils.instance;
    };
    PlatformUtils.prototype.isChromeBrowser = function () {
        return platform.name === "Chrome";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isSafariBrowser = function () {
        return platform.name === "Safari";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isChromeMobileBrowser = function () {
        return platform.name === "Chrome Mobile";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isFirefoxBrowser = function () {
        return platform.name === "Firefox";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isFirefoxMobileBrowser = function () {
        return platform.name === "Firefox Mobile";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isOperaBrowser = function () {
        return platform.name === "Opera";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isOperaMobileBrowser = function () {
        return platform.name === "Opera Mobile";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isAndroidBrowser = function () {
        return platform.name === "Android Browser";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isElectron = function () {
        return platform.name === "Electron";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isSamsungBrowser = function () {
        return (platform.name === "Samsung Internet Mobile" ||
            platform.name === "Samsung Internet");
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isIPhoneOrIPad = function () {
        var userAgent = !!platform.ua ? platform.ua : navigator.userAgent;
        var isTouchable = "ontouchend" in document;
        var isIPad = /\b(\w*Macintosh\w*)\b/.test(userAgent) && isTouchable;
        var isIPhone = /\b(\w*iPhone\w*)\b/.test(userAgent) &&
            /\b(\w*Mobile\w*)\b/.test(userAgent) &&
            isTouchable;
        return isIPad || isIPhone;
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isIOSWithSafari = function () {
        var userAgent = !!platform.ua ? platform.ua : navigator.userAgent;
        return (/\b(\w*Apple\w*)\b/.test(navigator.vendor) &&
            /\b(\w*Safari\w*)\b/.test(userAgent) &&
            !/\b(\w*CriOS\w*)\b/.test(userAgent) &&
            !/\b(\w*FxiOS\w*)\b/.test(userAgent));
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isIonicIos = function () {
        return this.isIPhoneOrIPad() && platform.ua.indexOf("Safari") === -1;
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isIonicAndroid = function () {
        return (platform.os.family === "Android" && platform.name == "Android Browser");
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.isMobileDevice = function () {
        return platform.os.family === "iOS" || platform.os.family === "Android";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.canScreenShare = function () {
        var version = (platform === null || platform === void 0 ? void 0 : platform.version) ? parseFloat(platform.version) : -1;
        // Reject mobile devices
        if (this.isMobileDevice()) {
            return false;
        }
        return (this.isChromeBrowser() ||
            this.isFirefoxBrowser() ||
            this.isOperaBrowser() ||
            this.isElectron() ||
            (this.isSafariBrowser() && version >= 13));
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.getName = function () {
        return platform.name || "";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.getVersion = function () {
        return platform.version || "";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.getFamily = function () {
        return platform.os.family || "";
    };
    /**
     * @hidden
     */
    PlatformUtils.prototype.getDescription = function () {
        return platform.description || "";
    };
    return PlatformUtils;
}());
exports.PlatformUtils = PlatformUtils;
//# sourceMappingURL=Platform.js.map